UNIX--Uniplexed Information and Computing Service:
- Unix was originally developed in 1969 by a group of AT&T employees at Bell Labs, including Ken Thompson,
  Dennis Ritchie, Douglas McIlroy, and Joe Ossanna
- There are various Unix variants available in the market. Solaris Unix, AIX, HP Unix and BSD are few
  examples. Linux is also a flavor of Unix which is freely available,Linus Torvalds developed in 1991
- Several people can use a UNIX computer at the same time; hence UNIX is called a multiuser system.
- A user can also run multiple programs at the same time; hence UNIX is called multitasking.

Basic Commands:
- $>date, $>date -u -- Shows the current date, with UTC time zone
- $>cal, $>cal 2016, $>cal 7 2016, $> cal -j 7 2016 -- Shows the current year,month, calendar with days
- $>calendar -- Create a file named calendar with `Month day <tab> Message` and save in PWD. this command shows reminder
- $>uptime -- shows how long your system has been up
- $>hostname -- shows the name of computer
- $>uname, $> uname -a -- shows the name of OS, more details
- $>lock, $>lock -5 -- locks the terminal for 15 min, for 5 min and requirs password for unlock
- $>leave, $>leave +15, $>leave 1030 -- Reminds you when to leave computer, after 15 min, after 10h 30min

Build-in programs
- bc -- a build in fully programmable calculator
- dc -- a eariler desk calculator, stack based


Login Unix:
- When you first connect to a UNIX system, you usually see a prompt such as the following:
- login:



Change Password:
1. Type passwd at command prompt.
2. Enter your old password.
3. Type your new password.
4. Verify the new password by typing it again.



Listing Directories and Files:
- You can use `ls`,`ls -a` and `ls -l`(for more) command to list out all the files or directories available in a directory.
- Enteries starting with d..... represent directories, other represents files.



Who Are You?:
- While you're logged into the system, you might be willing to know -- Who am I?
- just type command `whoami`



Who is Logged In?:
- Sometime you might be interested to know who is logged into the computer at the same time.
- There are three commands are available to get you this information: `users`, `who`, and `w`.
- Each command gives the diffrent level of information about currently logged in users.



Logging Out:
- Type logout command at command prompt, and the system will clean up everything and break the
  connection.



System Shutdown:
The most consistent way to shut down a Unix system properly via the command line is to use one of the following commands-
- halt: Brings the system down immediately.
- init 0: Powers off the system using predefined scripts to synchronize and clean up the system prior to shutdown.
- init 6: Reboots the system by shutting it down completely and then bringing it completely back up.
- poweroff:  Shuts down the system by powering off.
- reboot:  Reboots the system.
- shutdown: Shuts down the system.



Unix File Management:
- All data in UNIX are organized into files.
- All files are organized into directories.
- These directories are organized into a tree-like structure called the filesystem.
- In UNIX there are three basic types of files ---
  1. Ordinary Files: A file on the system that contains data, text, or program instructions.
  2. Directories: Directories store both special and ordinary files.
  3. Special Files: Files which provide access to hardware such as hard drives,CD-ROM drives,modems,and Ethernet adapters.
- Single dot .  --- This represents current directory.
- Double dot .. --- This represents parent directory.



Creating Files:
- vi or vim or gedit to create/edit ordinary files.
- touch command to create a blak file.
- head/tail/more/less command to read parts of files.
- cat and cat -b (with line number) to read files.
- wc to count words and wc -l to count lines in file.
- cp for copy, rm for deleting, mv for moving files. $>rm -r/-rf dir,$>rmdir dir for directories.
- mkdir for creating directory and mkdir -p for creating dir with parent dirs and rmdir for deleting empty dir.



Unixâ€“IO Redirections and Standard Unix Streams:
- Under normal circumstances every Unix program has three streams (files) opened for it when it starts up:
  1. stdin : This is referred to as standard input and associated file descriptor is 0.
  2. stdout : This is referred to as standard output and associated file descriptor is 1.
  3. stderr : This is referred to as standard error and associated file descriptor is 2.
- eg. sh program_name 0< in_file 2> out_file 3> err_file.
- You can redirect on stream to other. eg. sh program_name 1>&2



The Permission Indicators:
- File ownership is an important component of UNIX that provides a secure method for storing files.
- Every file in UNIX has the following attributes:
  1. Owner permissions:4+2+1,0+0+0,0+0+0   --- 700
  2. Group permissions:4+2+1,4+2+1,+0+0+0  --- 770
  3. Other (world) permissions: 4+2+1,4+2+1,4+2+1 --- 777
- The permissions are broken into groups of threes, and each position in the group denotes a specific permission,
  in this order: read (r), write (w), execute (x):4-6-1
- chmod is used to change the permission: + for assigning designated permission, - for removing and = for setting permission.
  eg. chmod +wx
- chown: The chown command stands for "change owner" and is used to change the owner of a file.
- chgrp: The chgrp command stands for "change group" and is used to change the group of a file.



Unix Environment:
- An important Unix concept is the environment, which is defined by environment variables.
- Some are set by the system, others by you, yet others by the shell, or any program that loads another program.
- A variable is a character string to which we assign a value. The value assigned could be a number, text, filename,
  device, or any other type of data.
- Environment variables are set without using $ sign but while accessing them we use $sign as prefix.
- These variables retain their values until we come out ofshell.
- When you login to the system, the shell undergoes a phase called initialization to set up various environments,
  The process is as follows:
	1. The shell checks to see whether the file /etc/profile exists.
	2. If it exists, the shell reads it. Otherwise, this file is skipped. No error message is displayed.
	3. The shell checks to see whether the file .profile/.bashrc exists in your home directory. Your home directory is the
	   directory that you start out in after you log in.
	4. If it exists, the shell reads it; otherwise, the shell skips it. No error message is displayed.
  As soon as both of these files have been read, the shell displays a prompt: $
- The characters that the shell displays as your command prompt are stored in the variable PS1, you can change.



Java Basic Utilities:
- pr command:The pr command does minor formatting of files on the terminal screen or for a printer.
             eg. pr -2 -h "Restaurants" food.txt --- this makes a two-column file with the header Restaurants.
- The command lp or lpr prints a file onto paper as opposed to the screen display.
- he lpstat and lpq command shows what's in the printer queue.
- cancel and lprm commands terminate the printing request.
- You use the Unix mail command to send and receive mail. Here is the syntax to send an email:
  $mail -s message_texts [-s subject] [-c cc-addr] [-b bcc-addr] to-addr



Unix Pipes and Filters:
- Pipe: To make a pipe, put a vertical bar (|) on the command line between two commands.
- Filter: When a program takes its input from another program, performs some operation on that input, and writes the
          result to the standard output, it is referred to as a filter.
- The `grep` program searches a file or files for lines that have a certain pattern. The syntax is:
  $grep pattern file(s) or $ls -l | grep pattern. and grep -i for case insensitive search.
- The `sort` command arranges lines of text alphabetically or numerically.
  Options: sort -n(numerical),-r(reverse),-f(u/l insensitive),+x(ignore first x fiels).
- Writing more than one commands in one line -- $>date;pwd;ls;wc-l -- semical is used to separte commands.



Unix Processes Managemen:
- Whenever you issue a command in UNIX, it creates, or starts, a new process.
  Example: When you issue ls command,you started a process.
- The OS tracks processes through a five digit ID number known as the pid.
- Any process/command can be run in two modes: forground and background mode.
- The simplest way to start a background process is to add an ampersand ( &) at the end of the command.
- ps(process status): To see your running processes. -f optios shows more info about processes and -a to see all processes.
- kill: Kills the process. If a process ignores a regular kill command, you can use kill -9 followed by the process ID.
- pid/ppid: Each unix process has two ID numbers assigned to it: Process ID (pid) and Parent process ID (ppid).
- Parent and Child Process: Each user process in the system has a parent process. see with ps -f.
                            Most command has shell as parent process.
- Zombie and Orphan processes: processes with no parent or default init process as a parent are called Orphan processes.
                               When a process is killed, a ps listing may still show the process with a Z state, Zombie process.
- Daemons process: These are system-related background processes and has no controlling tty. ps -ef shows ? for these in tty field.
- top command: it is a very useful tool and shows information about physical and virtual memory, CPU usage, load averages, and your busy processes.
- ampersand(&) is used to send command execution in background -- $> ls &



Unix Communication:
- There are several Unix utilities which are especially useful for users computing in a networked,distributed environment.
- Ping: The ping command sends an echo request to a host available on the network. eg. ping host_name/ip_addr
        Using this command you can check if your remote host is responding well or not.
- ftp: 	This utility helps you to upload and download your file from one computer to another computer.
        Syntax: ftp host_name, and get authenticated, use put/get/cd commands to upload/download files from local to remote computer.
- sftp: It's secure versionof ftp.
- telnet: It's the traditioal version of ssh.
- finger: This gives the information about uses in the host. finger user_name gives info about this user.
          finger @avtar.com --- to check all logged in users in romote host avtar.com



Unix-What is Shell:
- A shell is an environment in which we can run our commands, programs, and shell scripts.
- Shell Types --- In UNIX there are two major types of shells:
   1. The Bourne shell(/bin/sh): If you are using a Bourne-type shell, the first shell, the default prompt is the $ character.
        1. Bourne shell (sh)
        2. Korn shell (ksh) 
        3. Bourne Again shell (bash)
        4. POSIX shell (sh)
   2. The C shell(/bin/csh): If you are using a C-type shell, the default prompt is the % character.
	1. C shell (csh)
	2. TENEX/TOPS C shell (tcsh)
- #!/bin/sh: This tells the system that the commands that follow are to be executed by the Bourne shell.
             It's called a shebang because the # symbol is called a hash, and the ! symbol is called a bang.
             Simply # is used as comment starter.



Unix-Using Variables:
- By convention, Unix Shell variables would have their names in UPPERCASE.
- unset variable_name is used to unset the value of variable.
- Variable Types ---
  When a shell is running, three main types of variables are present:
     1. Local Variables: A local variable is a variable that is present within the current instance of the shell.
     2. Environment Variables: An environment variable is a variable that is available to any child process of the shell.
			       Some programs need environment variables in order to function correctly.
     3. Shell Variables: A shell variable is a special variable that is set by the shell and is required by the shell in
                         order to function correctly.



Unix-Special Variables:
 $0 --- The filename of the current script.
 $n --- These variables correspond to the arguments with which a script was invoked. Here n is a positive
        decimal number corresponding to the position of an argument (the first argument is $1, the second
        argument is $2, and so on).
 $# --- The number of arguments supplied to a script.
 $* --- All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
 $@ --- All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent
        to $1 $2.
 $? --- The exit status of the last command executed.
 $$ --- The process number of the current shell.
 $! --- The process number of the last background command.

Unixâ€“Using Arrays:
- Single valued variable is called scalar variable and multi-valued variable is called array/vector.
- Array Definitiona: array_name=(value1 ... valuen) 
  Accessing Array Values: ${array_name[index]}



Unix-Basic Operators:
 1. Arithmetic Operators -- +,-,*,/,=,==,%,!= and eg. `expr 4 + 6` returns 10 or `expr $a * $b` or $a != $b 
 2. Relational Operators -- -eq,-ne,-gt,-lt,-ge,-le and eg. [ $a -eq $b ] will return  true/false.
 3. Boolean Operators -- !(NOT),-a(AND),-o(OR)
 4. String Operators -- =, !=,-z,-n,Str and eg. 
 5. File Test Operators -- -b(for block special),-c,-d(for directory),-f and eg [ -d $file_name] to check if file is directory.
- The Bourne shell didn't originally have any mechanism to perform simple arithmetic but it uses external
  programs,either awk or the must simpler program expr.



Unixâ€“Decision Making:
- There are two constructs
  1. The if...else statements
     Syntax:
      		if [ expression ]
		then
		 #Statement(s) to be executed if expression is true
                elif [ expression 2 ]
                then
                 #statements here
                else
                 #Statement(s) to be executed if expression is false
		fi
  2. The case...esac statement
     Syntax:
		case $word in
		pattern1)
		  Statement(s) to be executed if pattern1 matches
		  ;;
		pattern2)
		  Statement(s) to be executed if pattern2 matches
		  ;;
		esac



Unixâ€“Shell Loops:
- There are following 3 types of loop constructs
  1. The while loop
     Syntax:
	while [ expression ]
        do
           #Statement(s) to be executed if command is true
	done
  2. The for loop
     Syntax:
       for var in word1 word2 ... wordN
       do
	 #Statement(s) to be executed for every word.
       done
  3. The until loop
     Syntax:
        until [ expression ]
	do
	  #Statement(s) to be executed until command is true
	done
- Above all three loops can be nested.
	
	

Unixâ€“Loop Control:
- There are 2 types of loop control constructs
  1. The break statement: eg. break, break -5 etc.
  2. The continue statement


Unixâ€“Shell Substitutions:
- The shell performs substitution when it encounters an expression that contains one or more special characters. 
- Example: While printing value of the variable its substitued by its value.
           Same time "\n" is substituted by a new line -- echo -e "This is $a \n"



Unixâ€“Quoting Mechanisms(Metacharacters):
- ? matches with a single charater while listing files in a directory and an * would match more than one characters.
- escape characters are used to print special characters. eg. echo "\;" 



Unixâ€“Shell Functions:
- Functions enable you to break down the overall functionality of a script into smaller, logical subsections,which can
  then be called upon to perform their individual task when it is needed.
  Function Syntax:
     #define function here
     function_name () {
	#list of commands
     }
    # Invoke your function
    function_name
- You can define a function which would accept parameters while calling those function.
  These parameters would be represented by $1, $2 and so on. Syntax is same as above except send paramters while calling.
- You can return value from function using `return value` command and accept in calling side using return_value=$?



Unix-Manpage Help:
- Unix's version of help files are called man pages.
- If you know any command name but you do not know how to use it, then Man Pages are here to help you at every step.
- Example: $man command, $man ls, $man man


Unix-Regular Expressions:
- Regular expressions are used by several different Unix commands, including ed, sed, awk, grep, and, to a more limited
  extent, vi. See Data Manupulation sectio of Unix_Useful_Commands.pdf file for more infromatoin.


Unix Useful commands:
- The df Command --- The first way to manage your partition space is with the df (disk free) command. The command df -k (disk free)
                     displays the disk space usage in kilobytes and df -h in human readable form.
- The du Command --- The du (disk usage) command enables you to specify directories to show disk space usage on a particular directory.	



Unixâ€“User Administration:
- There are three types of accounts on a Unix system:
  1. Root account: All accesses.
  2. System Account: Specific accesses for specific tasks like sshd account and mail account
  3. User Accounts: General user accounts



Unixâ€“System Performance:
- UNIX has following major resource types that need to be monitored and tuned
  1. CPU
  2. Memory
  3. Disk space
  4. Communications lines
  5. I/O Time
  6. Network Time
  7. Applications programs
- Netstat,vmstat,nice,renice,ps,top,prof,gprof,uptime,time are some of commands to check system usage.



Unixâ€“System Logging:
- Unix systems have a very flexible and powerful logging system, which enables you to record almost
  anything you can imagine and then manipulate the logs to retrieve the information you require.
- The system uses a centralized system logging process that runs the program /etc/syslogd or /etc/syslog.
- Individual programs that need to have information logged send the information to syslog.
- Programs send their log entries to syslogd, which consults the configuration file /etc/syslogd.conf or /etc/syslog and,
  when a match is found, writes the log message to the desired log file.



Some Useful Commands:
#ln command and link command:
  - ln can create both soft and hard links but link only creates hard links.
  - A link is soft if it points to target file name instead of actual data pointed by target file.
  - A link is hard if points to actual data.
  - Example: ln -s actual_file.txt link_file.txt



Data Manupulation commands:
#awk command:
 - awk executes a set of instructions for each line of input.
 - You can specify instructions on the command line or create a script file.
 - Syntax: awk [-option] 'instructions' files : $awk -F ; '{print $1}'
 - Options: -f(script file), -F(field delimiter) -v(var=value).
 - Example: $cat file | awk -F ; '{print $2; print $2}'.
#sed command:
  - Syntax: $sed [-option] 'instruction' file_name: $sed 's/to_pattern/by_pattern/g' for substituting.
  - The -e option is necessary only when you supply more than one instruction on the command line.
  - There are three ways to specify multiple instructions on the command line:
        1. Separate instructions with semicolon: $sed 's/MA/Mas/;s/PA/Pennsylvania/'
	2. Precede each instruction by -e : $sed -e 's/MA/Mas/' -e 's/PA/Pennsy/'
        3. Use the multiline entry capability of the Bourne shell by pressing RETURN after entering a single quote.
  - To execute a script file using sed: $sed -f scriptfile file.
  - sed flags: /g(Global replacement),Is(sed recursive),/p(print),/w(Write to a file),/I(Ignore Case).
  - Options: -n(supress disply of lines) -f(script file) -e(editting instruction).
#cmp command:
  - Compares two files, and if they differ, tells the first byte and line number where they differ.
  - Unlike 'diff', 'cmp' cannot compare directories.
  - Syntax: $cmp [options] FromFile [ToFile]
  - Options: -c(character difference) -l(print) -v(verbose) etc.
#comm command:
  - To compare files line by line
  - Syntax: $comm file1 file2
#cut command:
  - Usage:To divide a file into several parts (columns).
  - Syntax: $cut [OPTION] [FILE], $cat sample.txt | cut -d \; -f 2 > output.txt
  - The delimiter must be a single character.
  - Options: -d(field delimiter),-f(field list).
#diff command:
  - diff analyzes two files and prints the lines that are different.
  - It outputs a set of instructions for how to change one file in order to make it identical to the second file.
  - It can optionally generate a script (with the -e option) for the program ed (or ex) which can be used to apply the changes.
#join command:
  - Joins the lines of two files which share a common field of data.
  - Syntax: join [OPTION] FILE1 FILE2.
  - Options:-1 FIELD(join on this FIELD of file 1),-2 FIELD(join to this FIELD of file2), --header(treat first line as header).
#split command:
  - split outputs fixed-size pieces of input file to files named PREFIXaa, PREFIXab etc.
  - The default size for each split file is 1000 lines, and default PREFIX is "x".
  - Syntax: $split [OPTION] [INPUT [PREFIX]].
  - Options: -b(split size in byte),-d(numeric suffixes instead of character),-l(no lines per split),-n(no of CHUNKS)
#uniq command:
  - Does uniq of lines in file.
#wc command:
  - line or word count.
#fmt command:
  - fmt is a formatter for simplifying and optimizing text files.
  - Syntax: $fmt [-WIDTH] [OPTION] [FILE]
#grep command:
  - Searches a file  or files for lines that have a certain pattern.
  - The syntax is: $grep pattern file(s) or $ls -l | grep pattern.
  - Options: -i for case insensitive search.
#sort command:
  - Arranges lines of text alphabetically or numerically, default string sort.
  - Syntax: $sort file(s) or $cat file | sort.
  - Options: -n(numerical),-r(reverse),-f(u/l insensitive),+x(ignore first x fiels).


Matching Single Characters
- [abc] matches one letter a, b, or c.
- The specification [0-9] matches the characters 0 through 9.
- [a-np-z]* matches all files that start with the letters a through n or p through z (or any lowercase letter but o).
- [!a-z] matches any character except a lowercase letter.
- *[!o] matches any file that doesn't end with the lowercase letter o.
- ls [a-z]*[!0-9] lists files that begin with a lowercase letter and don't end with a digit.

